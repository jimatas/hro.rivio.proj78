/*
 * Proj7-8:  DOM Level 1 implementation
 * 
 * K. Atas <0712593@student.hro.nl>
 * H.J. Bos <0779473@student.hro.nl>
 */

package proj78.xml.parser;

import java.util.Map;

import proj78.xml.XmlException;

/**
 * Allows for implementing classes to register themselves with an XML parser and
 * be notified of the <em>significant parse events</em> that are generated by it.
 * 
 * @author K.A., copyright (c) 2008
 */
public interface XmlParseEventListener {
	/**
	 * Called when the XML declaration is parsed.
	 * 
	 * @param version the XML version in use.
	 * @param encoding the declared character encoding. Optional attribute; may be <code>null</code>.
	 * @param standalone the document's standalone designation. Optional attribute; may be <code>null</code>.
	 * @throws XmlException implementations may throw an <code>XmlException</code> 
	 * 	(or subclass) from within this method.
	 */
	void onXmlDeclaration(String version, String encoding, String standalone);
	
	/**
	 * Called when the DOCTYPE declaration is parsed.
	 * 
	 * @param dtdName the name immediately following the DOCTYPE keyword.
	 * @param publicId the public identifier of the external subset. Optional identifier; may be <code>null</code>.
	 * @param systemId the system identifier of the external subset. Optional identifier; may be <code>null</code>.
	 * @param internalSubset the internal subset if present, otherwise <code>null</code>.
	 * @throws XmlException implementations may throw an <code>XmlException</code> 
	 * 	(or subclass) from within this method.
	 */
	void onDoctype(String dtdName, String publicId, String systemId, String internalSubset);
	
	/**
	 * Called when the starting tag of an element is parsed.
	 * 
	 * @param tagName the tag name of the element.
	 * @param attrs a read-only view of a (possibly empty) map of name/value pairs denoting 
	 * 	the attributes found in the element's starting tag.
	 * @throws XmlException implementations may throw an <code>XmlException</code> 
	 * 	(or subclass) from within this method.
	 */
	void onTagStart(String tagName, Map<String, String> attrs);
	
	/**
	 * Called when the ending tag of an element is parsed.
	 * 
	 * @param tagName the tag name of the element.
	 * @throws XmlException implementations may throw an <code>XmlException</code> 
	 * 	(or subclass) from within this method.
	 */
	void onTagEnd(String tagName);
	
	/**
	 * Called when a processing instruction is parsed.
	 * 
	 * @param target the instruction target.
	 * @param data the instruction data.
	 * @throws XmlException implementations may throw an <code>XmlException</code> 
	 * 	(or subclass) from within this method.
	 */
	void onProcessingInstruction(String target, String data);
	
	/**
	 * Called when a CDATA-section is parsed.
	 * 
	 * @param content the CDATA-section's character content.
	 * @throws XmlException implementations may throw an <code>XmlException</code> 
	 * 	(or subclass) from within this method.
	 */
	void onCDataSection(String content);
	
	/**
	 * Called when an XML comment is parsed.
	 * 
	 * @param content the commented text (i.e., everything between <code>&lt;!--</code> 
	 * 	and <code>--&gt;</code>).
	 * @throws XmlException implementations may throw an <code>XmlException</code> 
	 * 	(or subclass) from within this method.
	 */
	void onComment(String content);
	
	/**
	 * Called when text (i.e., character data other than CDATA) is parsed.
	 * 
	 * @param chars the characters parsed.
	 * @throws XmlException implementations may throw an <code>XmlException</code> 
	 * 	(or subclass) from within this method.
	 */
	void onCharacters(String chars);
}